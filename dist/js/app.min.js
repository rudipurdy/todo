/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nconst btn1 = document.querySelector('.save')\r\nconst btn2 = document.querySelector('.write')\r\nconst textArea = document.querySelector('textarea')\r\nconst notes = document.querySelector('#notes')\r\nconst textElement = document.querySelector('#text')\r\nconst input = document.querySelector('input')\r\nconst popup = document.querySelector('.popup')\r\n\r\nlet tasks = []    \r\n\r\nfunction showPopup() {\r\n    if(textElement.style.display){\r\n        textElement.style.display = 'none'\r\n    }\r\n    popup.classList.add('active')\r\n    input.focus()   \r\n}\r\n    \r\n\r\nfunction pushTask(){\r\n    \r\n    const task = document.createElement('li')\r\n    task.textContent = input.value\r\n    tasks.push({task, text:''})\r\n    notes.appendChild(task)\r\n    popup.classList.remove('active')\r\n    input.value = ''\r\n    \r\n    if(tasks.length > 0){\r\n        let info = document.querySelector('#info')\r\n        info.style.display = 'none'\r\n    }\r\n}\r\n        \r\n    \r\nfunction openTask(e) {\r\n    if(popup.classList.contains('active')){\r\n        popup.classList.remove('active')\r\n    }\r\n\r\n    const task = e.target\r\n   \r\n    if(task.tagName !== 'LI') return // на всякий случай проверка точно ли по элементу li тыкнули\r\n    setActiveTask(task)\r\n    \r\n    \r\n    const activeTask = getActiveTaskFromArray()\r\n    textArea.value = activeTask.text || ''\r\n    textContetActive()\r\n}\r\n\r\nfunction saveText() { // тут помощью функции getActiveTaskFromArray получаем объект с активной таской и меняем внутри нее текст. так как мы получаем ссылку на объект\r\n    //то при ее изменении этот объект меняется и в самом массиве\r\n    const textValue = textArea.value\r\n   \r\n    const activeTask = getActiveTaskFromArray()\r\n    activeTask.text = textValue\r\n}\r\n\r\n\r\nfunction textContetActive() { // textarea делаем видимой\r\n    if (textElement.style.display === 'block') return\r\n\r\n    textElement.style.display = 'block'\r\n}\r\n\r\nfunction getActiveTaskFromArray() {\r\n    //через деструктаризацию получаю нужный объект(у которго data-active = true) из массива tasks\r\n    const [activeTask] = tasks.filter(({task}) => {\r\n        return task.dataset.active === 'true'\r\n    })\r\n\r\n    return activeTask\r\n}\r\n\r\nfunction setActiveTask(task) { // делаем тыкнутую таску активной а все остальные неактивными\r\n    tasks.forEach(({task}) => {\r\n        task.dataset.active = false\r\n    })\r\n    task.dataset.active = true\r\n}\r\n\r\nbtn2.addEventListener('click', showPopup)\r\ninput.addEventListener('change', pushTask)\r\nnotes.addEventListener('click', openTask)\r\nbtn1.addEventListener('click', saveText)\r\n\r\n\r\n\r\n\r\n    \r\n\r\n\r\n\r\n\r\n             \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n\r\n\r\n\n\n//# sourceURL=webpack://app/./src/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/app.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;